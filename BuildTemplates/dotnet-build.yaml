jobs:
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: 'build'
            projects: '**/*.csproj'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s/{{Name}}/${{ parameters.app }}/g'' helm/*/templates/*.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' helm/*/*.yaml && sed -i ''s/{{BuildId}}/$(Build.BuildId)/g'' helm/*/templates/deployment.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' helm/*/templates/deployment.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' Dockerfile' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: SonarQubePrepare@4
          inputs:
            SonarQube: 'SonarQube'
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: '50f27fb8401c2474c8addd5df1d9e4ee35aaa270'
            cliProjectName: '$(Build.Repository.Name)'
            cliSources: '.'
        - task: SonarQubeAnalyze@4
        - task: SonarQubePublish@4
          inputs:
            pollingTimeoutSec: '300'
        - task: HelmInstaller@0
          inputs:
            helmVersion: '3.0.0'
            checkLatestHelmVersion: false
            installKubectl: true
        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: '$(System.DefaultWorkingDirectory)/helm/$(Build.Repository.Name)'
        - task: Docker@0
          displayName: 'Build an image'
          inputs:
            azureSubscription: 'Microservices - Service Principal'
            azureContainerRegistry: '{"loginServer":"saudeidregistry.azurecr.io", "id" : "/subscriptions/b3a6aac8-c006-4ed2-abd9-cd47965f5947/resourceGroups/saudeid-aks/providers/Microsoft.ContainerRegistry/registries/saudeidRegistry"}'
            dockerFile: Dockerfile
            includeLatestTag: true
            additionalImageTags: $(Environment.Name)-$(Build.BuildId)
        - task: Docker@0
          displayName: 'Push an image'
          inputs:
            azureSubscription: 'Microservices - Service Principal'
            azureContainerRegistry: '{"loginServer":"saudeidregistry.azurecr.io", "id" : "/subscriptions/b3a6aac8-c006-4ed2-abd9-cd47965f5947/resourceGroups/saudeid-aks/providers/Microsoft.ContainerRegistry/registries/saudeidRegistry"}'
            action: 'Push an image'
            includeLatestTag: true
            additionalImageTags: $(Environment.Name)-$(Build.BuildId)
        - task: HelmDeploy@0
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscription: 'Microservices - Service Principal'
            azureResourceGroup: ${{ parameters.resourcegroup }}
            kubernetesCluster: ${{ parameters.cluster }}
            useClusterAdmin: true
            namespace: ${{ parameters.namespace }}
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(System.DefaultWorkingDirectory)/helm/$(Build.Repository.Name)'
            releaseName: ${{ parameters.release}}
            waitForExecution: false