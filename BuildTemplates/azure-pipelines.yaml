# Repo: templates/
# File: azure-pipelines.yml
parameters:
- name: environment
  type: object
  default: []
- name: namespace
  default: []
#- name: release
#  default: []
- name: app
  default: []
- name: coveragetest
  type: boolean
  default: false
- name: deploymentconfig
  type: boolean
  default: false
- name: virtualservice
  type: boolean
  default: false
- name: autoscale
  type: boolean
  default: false

stages:
- stage: Build
  jobs:
    # kubernetes: 'GCP - dev-Kubernetes'
  - deployment: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    environment: build
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true
          - checkout: templates
            clean: true
          - bash: npm install
            displayName: Install
            continueOnError: true
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
          - script: npm run build
            continueOnError: true
            displayName: Build
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
          - script: ls
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
 
- ${{ if contains(variables['Build.SourceBranchName'], 'dev') }}:
  - stage: Development
    jobs:
    - template: develop-build.yaml@templates
      parameters:
          environment: dev
          namespace: ${{ parameters.namespace }}
          release: dev-${{ parameters.app }}
          app: ${{ parameters.app }}
          stage: Development
          deploymentconfig: ${{ parameters.deploymentconfig }}
          virtualservice: ${{ parameters.virtualservice }}
          coveragetest: ${{ parameters.coveragetest }}
          autoscale: ${{ parameters.autoscale }}

- ${{ if contains(variables['Build.SourceBranchName'], 'release') }}:        
  - stage: Quality
    jobs:
    - template: develop-build.yaml@templates
      parameters:
          environment: qa
          namespace: ${{ parameters.namespace }}
          release: qa-${{ parameters.app }}
          app: ${{ parameters.app }}
          stage: Quality
          deploymentconfig: ${{ parameters.deploymentconfig }}
          virtualservice: ${{ parameters.virtualservice }}
          coveragetest: ${{ parameters.coveragetest }}
          autoscale: ${{ parameters.autoscale }}

  - stage: Production
    jobs:
    - template: develop-build.yaml@templates
      parameters:
          environment: prod
          namespace: ${{ parameters.namespace }}
          release: prod-${{ parameters.app }}
          app: ${{ parameters.app }}
          stage: Production
          deploymentconfig: ${{ parameters.deploymentconfig }}
          virtualservice: ${{ parameters.virtualservice }}
          coveragetest: ${{ parameters.coveragetest }}
          autoscale: ${{ parameters.autoscale }}

- ${{ if contains(variables['Build.SourceBranchName'], 'hotfix') }}:        
  - stage: Quality
    jobs:
    - template: develop-build.yaml@templates
      parameters:
          environment: qa
          namespace: ${{ parameters.namespace }}
          release: qa-${{ parameters.app }}
          app: ${{ parameters.app }}
          stage: Quality
          deploymentconfig: ${{ parameters.deploymentconfig }}
          virtualservice: ${{ parameters.virtualservice }}
          coveragetest: ${{ parameters.coveragetest }}
          autoscale: ${{ parameters.autoscale }}
        
  - stage: Production
    jobs:
    - template: develop-build.yaml@templates
      parameters:
          environment: prod
          namespace: ${{ parameters.namespace }}
          release: prod-${{ parameters.app }}
          app: ${{ parameters.app }}
          stage: Production
          deploymentconfig: ${{ parameters.deploymentconfig }}
          virtualservice: ${{ parameters.virtualservice }}
          coveragetest: ${{ parameters.coveragetest }}
          autoscale: ${{ parameters.autoscale }}
