# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:
- deployment: Production
  displayName: Production
  pool:
    vmImage: 'ubuntu-latest'
  environment: prod
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s/{{namespace}}/${{ parameters.namespace }}/g'' templates/helm/cronjob.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/cronjob.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/cronjob.yaml && sed -i ''s/{{BuildId}}/$(Build.BuildId)/g'' templates/helm/cronjob.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' templates/helm/cronjob.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' $(Build.Repository.Name)/Dockerfile' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: Docker@2
          inputs:
            containerRegistry: 'SaudeID-PRD Container Registry'
            repository: 'saudeid-prd/b2c/$(Build.Repository.Name)'
            command: 'build'
            Dockerfile: '**/Dockerfile'
            tags: '$(Environment.Name)-$(Build.BuildId)'
        - task: Docker@2
          inputs:
            containerRegistry: 'SaudeID-PRD Container Registry'
            repository: 'saudeid-prd/b2c/$(Build.Repository.Name)'
            command: 'push'
            tags: '$(Environment.Name)-$(Build.BuildId)'
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'GCP - dev-Kubernetes'
            namespace: ${{ parameters.namespace }}
            command: 'apply'
            arguments: '-f $(System.DefaultWorkingDirectory)/templates/helm/cronjob.yaml'