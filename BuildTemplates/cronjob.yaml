# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - checkout: templates
        - task: Bash@3
          displayName: Variables
          inputs:
            targetType: 'inline'
            script: 'env |sort >> variables.env' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - script: sed -r 's/ç/c/g;s/é/e/g;s/ã/a/g;s/\s+//g;s/#/-/g' variables.env >> env.env
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        - script: sed '/Relatedworkitems/d' -i env.env
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        - script: sed '/^-/d' -i env.env
          workingDirectory: '$(System.DefaultWorkingDirectory)'      
        - task: Bash@3
          displayName: Helm Deployment
          inputs:
            targetType: 'inline'
            script: 'cp -r templates/extensions/helm/deployment.yaml templates/helm/$(Environment.Name)/templates/deployment.yaml'
            workingDirectory: '$(System.DefaultWorkingDirectory)'   
        - script: mv $(Build.Repository.Name)/next.config.${{ parameters.environment }}.js $(Build.Repository.Name)/next.config.js
          continueOnError: true
        - task: Kubernetes@1
          displayName: 'Create ConfigMap for /data'
          inputs:
            kubernetesServiceEndpoint: 'GCP - ${{ parameters.environment }}-Kubernetes'
            namespace: '${{ parameters.namespace }}'
            forceUpdateConfigMap: true
            configMapName: ${{ parameters.app }}-config
            configMapArguments: --from-env-file=env.env
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s|{{crontime}}|${{ parameters.cronjob }}|g'' templates/helm/cronjob.yaml  && sed -i ''s/{{namespace}}/${{ parameters.namespace }}/g'' templates/helm/cronjob.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/cronjob.yaml && sed -i ''s/{{BuildId}}/$(Build.BuildId)/g'' templates/helm/cronjob.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' templates/helm/cronjob.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' $(Build.Repository.Name)/Dockerfile' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - script: cat templates/helm/cronjob.yaml 
        - task: Docker@2
          inputs:
            containerRegistry: 'SaudeID-PRD Container Registry'
            repository: 'saudeid-prd/${{ parameters.namespace }}/${{ parameters.app }}'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags: |
              $(Environment.Name)-$(Build.BuildId)
              latest
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'GCP - ${{ parameters.environment }}-Kubernetes'
            namespace: ${{ parameters.namespace }}
            command: 'apply'
            arguments: '-f $(System.DefaultWorkingDirectory)/templates/helm/cronjob.yaml'