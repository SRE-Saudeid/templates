jobs:
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - checkout: templates
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'ls'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/templates/*.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/*.yaml && sed -i ''s/{{BuildId}}/$(Build.BuildId)/g'' templates/helm/templates/deployment.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' templates/helm/templates/deployment.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' $(Build.Repository.Name)/Dockerfile' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: HelmInstaller@0
          inputs:
            helmVersion: '3.0.0'
            checkLatestHelmVersion: false
            installKubectl: true
        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: '$(System.DefaultWorkingDirectory)/templates/helm/'
        # - task: Docker@2
        #   inputs:
        #     containerRegistry: 'SaudeID-PRD Container Registry'
        #     repository: '$(Build.Repository.Name)'
        #     command: 'buildAndPush'
        #     Dockerfile: '**/Dockerfile'
        #     tags: '$(Environment.Name)-$(Build.BuildId)'
        - task: Docker@2
          inputs:
            containerRegistry: 'SaudeID-PRD Container Registry'
            repository: '$(Build.Repository.Name)'
            command: 'build'
            Dockerfile: '**/Dockerfile'
            tags: '$(Environment.Name)-$(Build.BuildId)'
        - task: Docker@2
          inputs:
            containerRegistry: 'SaudeID-PRD Container Registry'
            repository: '$(Build.Repository.Name)'
            command: 'push'
            tags: '$(Environment.Name)-$(Build.BuildId)'
        - task: HelmDeploy@0
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'GCP - dev-Kubernetes'
            namespace: '${{ parameters.namespace }}'
            command: 'install'
            chartType: 'FilePath'
            chartPath: '$(System.DefaultWorkingDirectory)/templates/helm'
            releaseName: '${{ parameters.release }}'
            waitForExecution: false
