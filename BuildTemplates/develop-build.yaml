parameters:
- name: environment
  type: object
  default: []
- name: namespace
  default: []
- name: release
  default: []
- name: app
  default: []
- name: stage
  default: []
- name: coveragetest
  default: []
- name: deploymentconfig
  default: []
- name: virtualservice
  default: []
- name: autoscale
  default: []
- name: nextjs
  default: []
- name: variables
  type: string
  default: ''


jobs:
  # kubernetes: 'GCP - dev-Kubernetes'
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      preDeploy:
        steps:
        - checkout: self
          clean: true
        - checkout: templates
          clean: true
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'GCP - ${{ parameters.environment }}-Kubernetes'
            namespace: '${{ parameters.namespace }}'
            command: 'login'
        - task: HelmInstaller@0
          inputs:
            helmVersion: '3.4.2'
            checkLatestHelmVersion: false
            installKubectl: true
        - ${{ if parameters.variables }}:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'env |sort >> variables.env' 
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - script: sed -r 's/ç/c/g;s/é/e/g;s/ã/a/g;s/\s+//g;s/#/-/g' variables.env >> env.env
            workingDirectory: '$(System.DefaultWorkingDirectory)'
          - script: sed '/Relatedworkitems/d;/ACCEPT_EULA/d;/AGENT_ACCEPTTEEEULA/d;/AGENT_BUILDDIRECTORY/d;/AGENT_DISABLELOGPLUGIN_TESTFILEPUBLISHERPLUGIN/d;/AGENT_DISABLELOGPLUGIN_TESTRESULTLOGPLUGIN/d;/AGENT_ENABLETASKRESTRICTIONSTELEMETRY/d;/AGENT_HOMEDIRECTORY/d;/AGENT_ID/d;/AGENT_JOBNAME/d;/AGENT_JOBSTATUS/d;/AGENT_LOGTOBLOBSTORAGESERVICE/d;/AGENT_MACHINENAME/d;/AGENT_NAME/d;/AGENT_OS/d;/AGENT_OSARCHITECTURE/d;/AGENT_READONLYVARIABLES/d;/AGENT_RETAINDEFAULTENCODING/d;/AGENT_ROOTDIRECTORY/d;/AGENT_TASKRESTRICTIONSENFORCEMENTMODE/d;/AGENT_TEMPDIRECTORY/d;/AGENT_TOOLSDIRECTORY/d;/AGENT_UPLOADBUILDARTIFACTSTOBLOB/d;/AGENT_UPLOADTIMELINEATTACHMENTSTOBLOB/d;/AGENT_USEWORKSPACEID/d;/AGENT_VERSION/d;/AGENT_WORKFOLDER/d;/ANDROID_HOME/d;/ANDROID_NDK_HOME/d;/ANDROID_NDK_LATEST_HOME/d;/ANDROID_NDK_ROOT/d;/ANDROID_SDK_ROOT/d;/ANT_HOME/d;/AZURE_EXTENSION_DIR/d;/AZURE_HTTP_USER_AGENT/d;/BOOTSTRAP_HASKELL_NONINTERACTIVE/d;/BUILD_ARTIFACTSTAGINGDIRECTORY/d;/BUILD_BINARIESDIRECTORY/d;/BUILD_BUILDID/d;/BUILD_BUILDNUMBER/d;/BUILD_BUILDURI/d;/BUILD_CONTAINERID/d;/BUILD_DEFINITIONNAME/d;/BUILD_DEFINITIONVERSION/d;/BUILD_QUEUEDBY/d;/BUILD_QUEUEDBYID/d;/BUILD_REASON/d;/BUILD_REPOSITORY_CLEAN/d;/BUILD_REPOSITORY_GIT_SUBMODULECHECKOUT/d;/BUILD_REPOSITORY_ID/d;/BUILD_REPOSITORY_LOCALPATH/d;/BUILD_REPOSITORY_NAME/d;/BUILD_REPOSITORY_PROVIDER/d;/BUILD_REPOSITORY_URI/d;/BUILD_REQUESTEDFOR/d;/BUILD_REQUESTEDFOREMAIL/d;/BUILD_REQUESTEDFORID/d;/BUILD_SOURCEBRANCH/d;/BUILD_SOURCEBRANCHNAME/d;/BUILD_SOURCESDIRECTORY/d;/BUILD_SOURCEVERSION/d;/BUILD_SOURCEVERSIONAUTHOR/d;/BUILD_SOURCEVERSIONMESSAGE/d;/BUILD_STAGINGDIRECTORY/d;/CHROMEWEBDRIVER/d;/CHROME_BIN/d;/COMMON_TESTRESULTSDIRECTORY/d;/CONDA/d;/DEBIAN_FRONTEND/d;/DOTNET_MULTILEVEL_LOOKUP/d;/DOTNET_NOLOGO/d;/DOTNET_SKIP_FIRST_TIME_EXPERIENCE/d;/ENDPOINT_URL_SYSTEMVSSCONNECTION/d;/ENVIRONMENT_DEPLOYMENTPHASEIDENTIFIER/d;/ENVIRONMENT_ID/d;/ENVIRONMENT_NAME/d;/GECKOWEBDRIVER/d;/GIT_TERMINAL_PROMPT/d;/GOROOT_1_14_X64/d;/GOROOT_1_15_X64/d;/GOROOT_1_16_X64/d;/GRAALVM_11_ROOT/d;/GRADLE_HOME/d;/HOME/d;/HOMEBREW_CELLAR/d;/HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS/d;/HOMEBREW_NO_AUTO_UPDATE/d;/HOMEBREW_PREFIX/d;/HOMEBREW_REPOSITORY/d;/INPUT_ARGUMENTS/d;/INVOCATION_ID/d;/ImageOS/d;/ImageVersion/d;/JAVA_HOME/d;/JAVA_HOME_11_X64/d;/JAVA_HOME_8_X64/d;/JOURNAL_STREAM/d;/LEIN_HOME/d;/LEIN_JAR/d;/MSDEPLOY_HTTP_USER_AGENT/d;/NVM_DIR/d;/PIPELINE_WORKSPACE/d;/PIPX_BIN_DIR/d;/PIPX_HOME/d;/POWERSHELL_DISTRIBUTION_CHANNEL/d;/PWD/d;/RESOURCES_TRIGGERINGALIAS/d;/RESOURCES_TRIGGERINGCATEGORY/d;/RUNNER_TOOLSDIRECTORY/d;/SELENIUM_JAR_PATH/d;/SHLVL/d;/STRATEGY_CYCLENAME/d;/STRATEGY_NAME/d;/SWIFT_PATH/d;/SYSTEM/d;/SYSTEM_ARTIFACTSDIRECTORY/d;/SYSTEM_COLLECTIONID/d;/SYSTEM_COLLECTIONURI/d;/SYSTEM_CULTURE/d;/SYSTEM_DEFAULTWORKINGDIRECTORY/d;/SYSTEM_DEFINITIONID/d;/SYSTEM_DEFINITIONNAME/d;/SYSTEM_ENABLEACCESSTOKEN/d;/SYSTEM_HOSTTYPE/d;/SYSTEM_ISSCHEDULED/d;/SYSTEM_JOBATTEMPT/d;/SYSTEM_JOBDISPLAYNAME/d;/SYSTEM_JOBID/d;/SYSTEM_JOBIDENTIFIER/d;/SYSTEM_JOBNAME/d;/SYSTEM_JOBPARALLELISMTAG/d;/SYSTEM_JOBTIMEOUT/d;/SYSTEM_PHASEATTEMPT/d;/SYSTEM_PHASEDISPLAYNAME/d;/SYSTEM_PHASEID/d;/SYSTEM_PHASENAME/d;/SYSTEM_PIPELINESTARTTIME/d;/SYSTEM_PLANID/d;/SYSTEM_POSTLINESSPEED/d;/SYSTEM_PULLREQUEST_ISFORK/d;/SYSTEM_SERVERTYPE/d;/SYSTEM_STAGEATTEMPT/d;/SYSTEM_STAGEDISPLAYNAME/d;/SYSTEM_STAGEID/d;/SYSTEM_STAGENAME/d;/SYSTEM_TASKDEFINITIONSURI/d;/SYSTEM_TASKDISPLAYNAME/d;/SYSTEM_TASKINSTANCEID/d;/SYSTEM_TASKINSTANCENAME/d;/SYSTEM_TEAMFOUNDATIONCOLLECTIONURI/d;/SYSTEM_TEAMFOUNDATIONSERVERURI/d;/SYSTEM_TEAMPROJECT/d;/SYSTEM_TEAMPROJECTID/d;/SYSTEM_TIMELINEID/d;/SYSTEM_WORKFOLDER/d;/TASK_DISPLAYNAME/d;/TF_BUILD/d;/VCPKG_INSTALLATION_ROOT/d;/VSTS_AGENT_PERFLOG/d;/VSTS_PROCESS_LOOKUP_ID/d;/XDG_CONFIG_HOME/d;/_/d;/agent.jobstatus/d' -i env.env
            workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'cp -r templates/extensions/helm/deployment.yaml templates/helm/$(Environment.Name)/templates/deployment.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'   
          - task: Kubernetes@1
            displayName: 'Create ConfigMap for /data'
            inputs:
              kubernetesServiceEndpoint: 'GCP - ${{ parameters.environment }}-Kubernetes'
              namespace: '${{ parameters.namespace }}'
              forceUpdateConfigMap: true
              configMapName: ${{ parameters.app }}-config
              configMapArguments: --from-env-file=env.env
          - script: cat env.env
        - ${{ if eq(parameters.deploymentconfig, 'true') }}:
          - script: cp -r $(Build.Repository.Name)/deployment.yaml templates/helm/$(Environment.Name)/templates/deployment.yaml
        - ${{ if eq(parameters.virtualservice, 'true') }}:
          - script: cp -r $(Build.Repository.Name)/virtualservice*.yaml templates/helm/$(Environment.Name)/templates/virtualservice.yaml
          - script: cp -r $(Build.Repository.Name)/service*.yaml templates/helm/$(Environment.Name)/templates/service.yaml
        - ${{ if contains(variables['Build.SourceBranchName'], 'release') }}:
          - ${{ if eq(parameters.autoscale, 'true') }}:
            - script: cp -r templates/extensions/helm/hpa.yaml templates/helm/$(Environment.Name)/templates/
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s/{{namespace}}/${{ parameters.namespace }}/g'' templates/helm/$(Environment.Name)/templates/*.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/$(Environment.Name)/templates/*.yaml && sed -i ''s/{{Name}}/${{ parameters.app }}/g'' templates/helm/$(Environment.Name)/*.yaml && sed -i ''s/{{BuildId}}/$(Build.BuildId)/g'' templates/helm/$(Environment.Name)/templates/*.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' templates/helm/$(Environment.Name)/templates/*.yaml && sed -i ''s/{{environment}}/$(Environment.Name)/g'' $(Build.Repository.Name)/Dockerfile*' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - ${{ if eq(parameters.nextjs, 'true') }}:
          - task: Npm@1
            inputs:
              command: 'install'
              verbose: true
              workingDir: $(Build.Repository.Name)
          - script: npm run build
            workingDirectory: ./$(Build.Repository.Name)
          - script: ls
            workingDirectory: ./$(Build.Repository.Name)
        - ${{ if eq(parameters.coveragetest, 'true') }}:
          - bash: npm install
            displayName: Install
            continueOnError: false
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
          - bash: npm run lint
            displayName: Lint
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
            continueOnError: true
          - bash: |
              npm test \
              --  \
              --ci  \
              --coverage  \
              --reporters=default  \
              --reporters=jest-junit  \
              --coverageReporters=text  \
              --coverageReporters=text-summary  \
              --coverageReporters=lcov  \
              --coverageReporters=cobertura
            displayName: Unit Test
            continueOnError: false
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'junit.xml'
              searchFolder: '$(Build.SourcesDirectory)'
              testRunTitle: '($(Build.SourceBranchName)): Unit Tests [$(Build.SourceVersion)]'
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
          - bash: npm run build
            displayName: Build
            continueOnError: false
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Build.SourcesDirectory)
              Contents: |
                **
                !coverage/**
                !.git/**
                !.vscode/**
                !node_modules/**
              TargetFolder: $(Build.BinariesDirectory)
              CleanTargetFolder: true
        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: '$(System.DefaultWorkingDirectory)/templates/helm/$(Environment.Name)'
        - ${{ if eq(parameters.deploymentconfig, 'false') }}:
          - task: Docker@2
            inputs:
              containerRegistry: 'SaudeID-PRD Container Registry'
              repository: 'saudeid-prd/${{ parameters.namespace }}/${{ parameters.app }}'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Environment.Name)-$(Build.BuildId)
                latest
        - ${{ if eq(parameters.deploymentconfig, 'true') }}:
          - task: Docker@2
            inputs:
              containerRegistry: 'SaudeID-PRD Container Registry'
              repository: 'saudeid-prd/${{ parameters.namespace }}/${{ parameters.app }}'
              command: 'buildAndPush'
              Dockerfile: '**/DockerfileDeployment'
              tags: |
                $(Environment.Name)-$(Build.BuildId)
                latest
#        - task: PublishBuildArtifacts@1
#          inputs:
#            PathtoPublish: './$(Build.Repository.Name)'
#            ArtifactName: 'out'
#            publishLocation: 'Container'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/templates/helm/$(Environment.Name)'
            ArtifactName: 'helm'
            publishLocation: 'Container'
      deploy:
        steps:
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'helm'
            downloadPath: '$(System.DefaultWorkingDirectory)'
        - task: HelmDeploy@0
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'GCP - ${{ parameters.environment }}-Kubernetes'
            namespace: '${{ parameters.namespace }}'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(System.DefaultWorkingDirectory)/helm'
            releaseName: '${{ parameters.release }}'
            install: true
            waitForExecution: false
            force: false
