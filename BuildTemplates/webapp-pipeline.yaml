jobs:
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - checkout: templates
        - task: DownloadSecureFile@1
          name: devgcptoken
          inputs:
            secureFile: 'dev-gcp_token.json'
        - task: DownloadSecureFile@1
          name: qagcptoken
          inputs:
            secureFile: 'qa-gcp_token.json'
        - task: DownloadSecureFile@1
          name: prodgcptoken
          inputs:
            secureFile: 'prod-gcp_token.json'
        - script: cp $(devgcptoken.secureFilePath) .
        - script: cp $(qagcptoken.secureFilePath) .
        - script: cp $(prodgcptoken.secureFilePath) .
        - script: mv $(Build.Repository.Name)/next.config.${{ parameters.environment }}.js $(Build.Repository.Name)/next.config.js
        - task: DownloadPackage@1
          inputs:
            packageType: 'npm'
            feed: '2c739036-e470-404a-ac5d-de5c84198609/3258a184-ef98-47da-a38f-c332096c6d17'
            view: '4fa63c26-f5c0-4776-b32a-1aa3547be025'
            definition: '8c27d21b-2e88-4761-aa6d-c3638eca0022'
            version: '1.1.2'
            downloadPath: './$(Build.Repository.Name)/node_modules/@saudeid/'
#        - script: mv package design-system
#          workingDirectory: ./$(Build.Repository.Name)/node_modules/@saudeid/
        - task: Npm@1
          inputs:
            command: 'install'
            verbose: true
            workingDir: $(Build.Repository.Name)
#        - script: npm install
#          workingDirectory: ./$(Build.Repository.Name)
        - script: npm run build
          workingDirectory: ./$(Build.Repository.Name)
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: './$(Build.Repository.Name)/out'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - script: gcloud auth activate-service-account --key-file ./$(Environment.Name)-gcp_token.json
        - task: GsutilRunner@0
          inputs:
            command: 'cp'
            arguments: '-r ./$(Build.Repository.Name)/out/* gs://${{ parameters.bucket }}'