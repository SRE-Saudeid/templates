parameters:
- name: environment
  type: object
  default: []
- name: stage
  default: []
- name: webapp
  default: []
- name: variables
  type: string
  default: ''

jobs:
- deployment: ${{ parameters.stage }}
  displayName: ${{ parameters.stage }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
        - checkout: templates
          clean: true
        - task: UseRubyVersion@0
          inputs:
            versionSpec: '>= 2.7.1'
            addToPath: true
          displayName: 'Installing Ruby'
        - script: |
            which ruby
        - ${{ if eq(parameters.webapp, 'true') }}:
            - script: |
                sudo apt-get -y install google-chrome-stable xvfb unzip libxi6 libgconf-2-4
                sudo apt autoremove
                sudo apt autoclean
                sudo apt clean
                cd /tmp
                wget "https://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip"
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
              displayName: "Installing chromedriver"
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
        - script: |
            gem install bundler -v 2.2.19
            bundle install --retry=3 --jobs=4
          displayName: 'Installing Bundler and Gems' 
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'
        - script: |
            cucumber -p ci -t 'not @not_run' --retry 2 
          displayName: 'Running tests'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)'         
        - task: PublishPipelineArtifact@0
          inputs:
            targetPath: "$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/report"
            artifactName: "Report"
          condition: succeededOrFailed()
          displayName: "Publish Report"
        - task: PublishTestResults@2
          inputs:
            testRunner: JUnit
            testResultsFiles: 'report/junit/TEST*.xml'
            mergeTestResults: true
            testRunTitle: "Test Results"
            publishRunAttachments: true
            condition: succeededOrFailed()
          continueOnError: true